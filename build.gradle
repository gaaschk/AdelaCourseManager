buildscript {
    ext {
        springBootVersion = '1.3.2.RELEASE'
        springGradlePluginVersion = '0.5.4.RELEASE'
        gradleAptPluginVersion = "1.0"
    }
    repositories {
		mavenLocal()
        maven { url "https://maven-central.storage.googleapis.com"}
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:${springGradlePluginVersion}"
		classpath "com.github.yamingd:gradle-apt-plugin:${gradleAptPluginVersion}"
    }
}

apply plugin: 'apt'
apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'spring-boot' 
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven-publish'
apply from: 'applicationDependencies.gradle'


war{
   version = project.majorVersion+'.'+project.minorVersion+'.'+project.buildVersion+project.publishSuffix
   rootSpec.exclude('scripts/**')
}

sourceCompatibility = project.jdkVersion
targetCompatibility = project.jdkVersion

repositories {
		mavenLocal()
        maven { url "https://maven-central.storage.googleapis.com"}
}

configurations {
	providedRuntime
}

eclipse {
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-'+project.jdkVersion
         file{
         	withXml { xml -> 
         		def node = xml.asNode()
         		node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container'})
         		node.appendNode( 'classpathentry', [kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
         	}
         }
    }
}

ext {
	springBootVersion = '1.3.2.RELEASE'
	springCloudVersion = 'Angel.SR6'
	metricsVersion = '3.1.3'
	springBootAdminVersion = '1.3.2'
	swaggerVersion = '2.3.1'
	mapstructVersion = '1.0.0.Final'
}

dependencyManagement {
  compile{
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}"
		mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
	}
  }
}

dependencies {
	//Infrastructure dependencies
	compile ("org.springframework.cloud:spring-cloud-starter-eureka")
	compile ("org.springframework.boot:spring-boot-starter-actuator")
	compile ("org.springframework.cloud:spring-cloud-starter-hystrix")
	compile ("com.ryantenney.metrics:metrics-spring:${metricsVersion}")
	compile ("io.dropwizard.metrics:metrics-graphite")
	compile ("de.codecentric:spring-boot-admin-starter-client:${springBootAdminVersion}")
	//REST API
	compile ("org.springframework.boot:spring-boot-starter-web")
    //REST API Documentation
    compile ("io.springfox:springfox-swagger2:${swaggerVersion}")
    compile ("io.springfox:springfox-swagger-ui:${swaggerVersion}")

	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "com.jayway.jsonpath:json-path"
	//MapStruct
	compile ("org.mapstruct:mapstruct-jdk8:${mapstructVersion}")
	apt ("org.mapstruct:mapstruct-processor:${mapstructVersion}")
}

//task to build a source jar
task sourceJar(type: Jar) {
   from sourceSets.main.allJava
}

task copyConfFiles(type: Copy) {
   from "src/main/resources/"
   into "$project.buildDir/config"
   include('*.yml') // your configuration files
}

import org.apache.tools.ant.filters.*;
task tar(type: Tar, dependsOn: bootRepackage) {
   dependsOn copyConfFiles
   def fileName = "${war.baseName}-${war.version}"
   from ("$buildDir/libs"){
	  include "${fileName}.war"
   }
   from ("$buildDir/config"){
	  include "**"
	  into "config"
   }
   from ("$buildDir/resources/main/scripts"){
	  include "**"
	  into "bin"
	  filter(FixCrLfFilter.class,
		 eol:FixCrLfFilter.CrLf.newInstance("lf"))
   }
   archiveName "${fileName}.tar"
}

build.dependsOn(tar)

publishing {
   publications {
	  /* mavenWeb(MavenPublication) {
		 from components.web
	  }*/
	  maven(MavenPublication) {
		 groupId "${war.group}"
		 artifactId "${war.baseName}"
		 version "${war.version}"
		 artifact tar {
			classifier "deployables"
			extension "tar"
		 }
	  }
   }
   repositories {
	  maven {
		 credentials{
			username project.username
			password project.password
		 }
		 url "${project.publishRepoUrl}/${project.repositoryName}"
	  }
   }
}
